name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  Build_and_Test_App:
    name: Build and Test Flutter App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: flutter-actions/setup-flutter@v2
        with:
          version: '3.29.3'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Create .env file from template
        run: cp .env_template .env

      - name: Analyze Dart code
        run: flutter analyze

      - name: Run tests with coverage
        run: flutter test --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov.info

  Upload_HTML_Coverage_Report_and_Badge:
    name: Publish Coverage Report
    needs: Build_and_Test_App
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container:
      image: uccioduri/ubuntu_lcov:latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Extract badge ID from README
        id: badge
        run: |
          line=$(grep -E 'badge::coverage' README.md || true)
          if [ -z "$line" ]; then
            echo "Badge marker not found in README.md"
            exit 1
          fi
          id=$(echo "$line" | sed -nE 's/.*coverage\/([0-9]{8}-[0-9]{6}-[0-9]+)\.svg.*/\1/p')
          if [ -z "$id" ]; then
            echo "Invalid badge ID"
            exit 1
          fi
          echo "badge_id=$id" >> $GITHUB_OUTPUT

      - name: Clone gh-pages branch
        run: |
          git clone --depth=1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages
          mkdir -p gh-pages/coverage

      - name: Check and commit lock file
        run: |
          id=${{ steps.badge.outputs.badge_id }}
          if [ -f gh-pages/coverage/$id.svg ]; then
            echo "Badge $id.svg already exists"
            exit 1
          fi
          if [ -f gh-pages/coverage/$id.lock ]; then
            echo "Lock file $id.lock already exists"
            exit 1
          fi
          if [ -d gh-pages/coverage/$id ]; then
            echo "Coverage directory $id already exists"
            exit 1
          fi
          touch gh-pages/coverage/$id.lock
          cd gh-pages
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add coverage/
          git commit -m "Lock badge slot $id"
          git push origin gh-pages

      - name: Extract coverage percentage
        id: coverage
        run: |
          total=$(lcov --summary lcov.info | grep lines | awk '{print $2}' | sed 's/%//')
          echo "coverage=$total" >> $GITHUB_OUTPUT

      - name: Determine badge color
        id: color
        run: |
          cov=${{ steps.coverage.outputs.coverage }}
          if (( $(echo "$cov < 50" | bc -l) )); then
            echo "color=red" >> $GITHUB_OUTPUT
          elif (( $(echo "$cov < 80" | bc -l) )); then
            echo "color=yellow" >> $GITHUB_OUTPUT
          else
            echo "color=brightgreen" >> $GITHUB_OUTPUT
          fi

      - name: Generate badge to .lock
        run: |
          id=${{ steps.badge.outputs.badge_id }}
          label=Coverage
          message="${{ steps.coverage.outputs.coverage }}%"
          color=${{ steps.color.outputs.color }}
          curl -Lo gh-pages/coverage/$id.lock \
            "https://img.shields.io/static/v1?label=$label&message=$message&color=$color&style=flat"

      - name: Generate HTML report directly in target
        run: |
          id=${{ steps.badge.outputs.badge_id }}
          mkdir -p gh-pages/coverage/$id
          genhtml lcov.info --output-directory gh-pages/coverage/$id

      - name: Finalize and commit badge and report
        run: |
          id=${{ steps.badge.outputs.badge_id }}
          mv gh-pages/coverage/$id.lock gh-pages/coverage/$id.svg
          cd gh-pages
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add coverage/
          git commit -m "Badge and report generated for $id"
          git push origin gh-pages
